name: 'Setup Node.js Environment'
description: 'Sets up Node.js with caching for dependencies'
inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '24.x'
  working-directory:
    description: 'Working directory for the action'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
    - name: Detect package manager
      id: detect-package-manager
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -f "yarn.lock" ]; then
          echo "manager=yarn" >> $GITHUB_OUTPUT
          echo "command=install" >> $GITHUB_OUTPUT
          echo "runner=yarn" >> $GITHUB_OUTPUT
          echo "cache-folder=.yarn/cache" >> $GITHUB_OUTPUT
        elif [ -f "package-lock.json" ]; then
          echo "manager=npm" >> $GITHUB_OUTPUT
          echo "command=ci" >> $GITHUB_OUTPUT
          echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          echo "cache-folder=~/.npm" >> $GITHUB_OUTPUT
        elif [ -f "pnpm-lock.yaml" ]; then
          echo "manager=pnpm" >> $GITHUB_OUTPUT
          echo "command=install --frozen-lockfile" >> $GITHUB_OUTPUT
          echo "runner=pnpm" >> $GITHUB_OUTPUT
          echo "cache-folder=~/.pnpm-store" >> $GITHUB_OUTPUT
        else
          echo "Unable to determine package manager"
          exit 1
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ steps.detect-package-manager.outputs.manager }}
        cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.detect-package-manager.outputs.cache-folder }}
        key: ${{ runner.os }}-${{ steps.detect-package-manager.outputs.manager }}-${{ hashFiles(format('{0}/**/package-lock.json', inputs.working-directory)) }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.detect-package-manager.outputs.manager }}-

    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

outputs:
  package-manager:
    description: 'Detected package manager'
    value: ${{ steps.detect-package-manager.outputs.manager }}
  runner:
    description: 'Package manager runner command'
    value: ${{ steps.detect-package-manager.outputs.runner }}